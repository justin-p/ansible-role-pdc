---
# tasks file for ansible-pdc
- name: Assert mandatory variables have been set
  ansible.builtin.assert:
    that:
      - pdc_administrator_username is defined
      - pdc_administrator_password is defined
      - ansible_windows_domain_member is defined
      - pdc_dns_nics is defined
      - pdc_dns_servers is defined
      - pdc_domain is defined
      - pdc_netbios is defined
      - pdc_domain_safe_mode_password is defined
      - pdc_domain_functional_level is defined
      - pdc_forest_functional_level is defined
      - pdc_required_psmodules is defined
      - pdc_required_features is defined

- name: Ensure the local user {{ pdc_administrator_username }} has the password specified for {{ pdc_netbios }}\{{ pdc_administrator_username }}
  ansible.windows.win_user:
    name: "{{ pdc_administrator_username }}"
    password: "{{ pdc_administrator_password }}"
    groups: administrators
  when: not ansible_windows_domain_member

- name: Ensure ansible_password matches the new password
  ansible.builtin.set_fact:
    ansible_password: "{{ pdc_administrator_password }}"
  when: not ansible_windows_domain_member

- name: Ensure that required DSC resources and Powershell Modules are present
  community.windows.win_psmodule:
    name: "{{ item }}"
    accept_license: true
    state: present
  with_items: "{{ pdc_required_psmodules }}"

- name: Ensure required Windows Features are installed
  ansible.windows.win_feature:
    name: '{{ item }}'
    include_management_tools: yes
  with_items: "{{ pdc_required_features }}"

- name: Ensure there is a Active Directory domain and forest on {{ ansible_hostname }}
  ansible.windows.win_domain:
    dns_domain_name: "{{ pdc_domain }}"
    domain_netbios_name: "{{ pdc_netbios }}"
    safe_mode_password: "{{ pdc_domain_safe_mode_password }}"
    domain_mode: "{{ pdc_domain_functional_level }}"
    forest_mode: "{{ pdc_forest_functional_level }}"
  register: pdc_install_domain
  notify: Reboot if the Active Directory requires it
  when: not ansible_windows_domain_member

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  ansible.builtin.meta: flush_handlers

- name: Ensure a Domain Controller is available in the domain
  ansible.windows.win_dsc:
    resource_name: WaitForADDomain
    DomainName: "{{ pdc_domain }}"

- name: Ensure DNS Forwarders are set to desired forwarders
  ansible.windows.win_shell: |
    Try {
      $CurrentForwarders = $([Array]$(Get-DnsServerForwarder).IPAddress.IPAddressToString)
      $DesiredForwarders = ConvertFrom-JSON '{{ pdc_desired_dns_forwarders | to_json }}'
      if ($CurrentForwarders) {
        if ($Null -ne $(Compare-Object $CurrentForwarders $DesiredForwarders)) {
          Set-DNSServerForwarder -IPAddress $DesiredForwarders
          Exit 1
        } Else {
          Exit 0
        }
      } Else {
        Set-DNSServerForwarder -IPAddress $DesiredForwarders
        Exit 1
      }
    }
    Catch {
      Exit 2
    }
  register: dns_forwarders
  changed_when: dns_forwarders.rc == 1
  failed_when: dns_forwarders.rc == 2

- name: Ensure upstream DNS servers is to {{ pdc_dns_servers }}
  ansible.windows.win_dns_client:
   adapter_names: "{{ pdc_dns_nics }}"
   ipv4_addresses: "{{ pdc_dns_servers }}"

- name: Ensure the UserPrincipalName of {{ pdc_netbios }}\{{ pdc_administrator_username }} is set to {{ pdc_administrator_username }}@{{ pdc_domain }}
  community.windows.win_domain_user:
    name: "{{ pdc_administrator_username }}"
    upn: "{{ pdc_administrator_username }}@{{ pdc_domain }}"
    domain_username: "{{ pdc_netbios }}\\{{ pdc_administrator_username }}"
    domain_password: "{{ pdc_administrator_password }}"
    update_password: on_create
